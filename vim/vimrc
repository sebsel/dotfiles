" +-------------------+
" | Vim Configuration |
" +-------------------+

"==> Table of Contents
" 1. Syntax and bells
" 2. Files  
" 3. Mappings
" 4. Plugins

let mapleader = "\<Space>"

"==> But first, let me load the plugins
so ~/.vim/plugins.vim


" --------------------
"  Chapter 1
"    Syntax and bells
" -------------------->

"==> All the colors
set t_Co=256


"==> Syntax
syntax enable
colorscheme afterglow "TODO where did I pull afterglow from?


"==> Mark lines longer than 80 chacaters

"-> This is a snippet that makes the background red. Looks doable.
"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v./ 

"-> Vim has functionality for this as well, but be sure to remove the t-flag 
"   from the formatoptions, or it will break lines for you. (Yuck.) 
set colorcolumn=80
set formatoptions=

"-> I want to toggle this as a sort of 'Text mode'
"nmap <Leader>vt :set linebreak<cr>
"autocmd OptionSet linebreak :match none

"-> But you know what? Let Vim do it for me
autocmd FileType markdown,text setlocal linebreak
autocmd FileType markdown,text setlocal colorcolumn=


"==> 'Spelling!'

"-> Quick way to enable spelling
nmap <silent> <Leader>znl :set spell spelllang=nl<cr>
nmap <silent> <Leader>zen :set spell spelllang=en<cr>
nmap <silent> <Leader>zz  :set nospell<cr>



"==> Bells and mouse

"-> Turn off the bell
set noerrorbells visualbell t_vb=

"-> Knowning all the keybindings is no excuse to turn off mouse support
set mouse=a


"==> Show invisible characters

"-> Toggle invisible characters
nmap <Leader>vi :set list!<cr>
command! Q quit

"-> Take better chars for those invisible characters
set listchars=tab:▸\ ,eol:¬,space:∙,nbsp:◦




"==> Standard cool Vim things

set wildmenu

"-> Keep the undo tree between sessions
"set undofile
"--> I really can't deal with all those extra files tho :(



"==> Layout tweaking

"-> remove the background color from the numberbar
highlight LineNr ctermbg=bg

"-> hide the dashes between vertical splits
highlight vertsplit ctermbg=bg ctermfg=bg

"-> highlight tab-characters to warn you 
highlight tab ctermbg=green

"-> Jeffrey Way's left padding hack
set foldcolumn=1
highlight foldcolumn ctermbg=bg

"-> Look ahead one line when scrolling down
set scrolloff=1



"==> Settings for MVim

"-> Font and breathing room
set guifont=Fira\ Code:h13
set linespace=15

"-> Don't use GUI tabs
set guioptions-=e

"-> No scrollbars all around
set guioptions-=l guioptions-=L guioptions-=r guioptions-=R



"==> Backspace like you're used to

set backspace=indent,eol,start


"==> Use relative linenumbers, but an absolute one for the current line

set relativenumber
set number


"==> Save buffer automatically when closing

"set autowriteall


"==> The tabs or spaces debate

"-> keep tabstop equal to softtabstop and shiftwidth
set tabstop=4 softtabstop=4 shiftwidth=4

"-> use spaces instead of tabs 
"   <c-v><c-i> in insert mode inserts a tab character if you need it
set expandtab


"==> Searching

"-> Search highligh if I want to
nmap <Leader><space> :set hlsearch! hlsearch?<cr>

"-> Incremental search: search as you type (we have fast computers now)
set incsearch

"-> I keep forgetting the search is case sensitive, so ignore
set ignorecase

"-> This makes the search insensitive if you search for lowercase
"   but sensitive if there's a capital in your search somewhere.
set smartcase

"-> But, because this also applies to replacements, I want to be able
"   to toggle it quickly. (https://stackoverflow.com/q/2287440)
nmap <Leader>C :set ignorecase! ignorecase?<cr>



" ----------------------
"  Chapter X
"    Splits and windows
" ---------------------->

"==> Split management

"-> It feels way more natural to me
set splitbelow
set splitright


"==> Window Management
"-> Normally one would use Ctrl+W and J/K/H/L to navigate from one pane to
"   another, but that's a lot of keystrokes. With these mappings, we only lose
"   the default Ctrl+L for redraw, the rest is unused.

"nmap <C-J> <C-W><C-J>
"nmap <C-K> <C-W><C-K>
"nmap <C-H> <C-W><C-H>
"nmap <C-L> <C-W><C-L>
"-> This is still current, but I now have a plugin that also
"   makes this work with Tmux panes.

" --------------------
"  Chapter 2
"    Files
" -------------------->

"==> Set a recursive fuzzy search

set path+=**

"==> Make gf also do import statements
set suffixesadd=.vue,.js,.ts,.rb


"==> Make it easy to edit config
nmap <Leader>cv :e $MYVIMRC<cr>
nmap <Leader>cp :e ~/.vim/plugins.vim<cr>
nmap <Leader>cs :e ~/.vim/snippets<cr>
nmap <Leader>ct :e ~/.tmux.conf<cr>
nmap <Leader>cz :e ~/.zshrc<cr>
nmap <Leader>c  :e ~/dotfiles<cr>


"==> Toggle NERDTree
nmap <Leader>t :NERDTreeToggle<cr>


"==> I know the thing is called CtrlP but no
let g:ctrlp_map = '<Leader>p'
nmap <Leader>r :CtrlPBufTag<cr>
nmap <Leader>e :CtrlPMRUFiles<cr>

"-> Use %% on the command line to get the directory of the current file
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
nmap <Leader>E :e %%

"-> CtrlP ignores
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|_build'
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:10'


"==> Leave Netrw alone, NERDTree!
let NERDTreeHijackNetrw = 0


"Tags
nmap <Leader>f :tag<space>



" --------------------
"  Chapter 4
"    Mappings
" -------------------->

"==> Quickly access Laravel files
nmap <Leader>lm :!php artisan make:
nmap <Leader>lr  :e routes/web.php<cr>
nmap <Leader>la  :CtrlP<cr>app/
nmap <Leader>lae :CtrlP<cr>app/Exceptions/
nmap <Leader>lac :CtrlP<cr>app/Http/Controllers/
nmap <Leader>lam :CtrlP<cr>app/Models/
nmap <Leader>laj :CtrlP<cr>app/Jobs/
nmap <Leader>lap :CtrlP<cr>app/Providers/
nmap <Leader>las :CtrlP<cr>app/Services/
nmap <Leader>lp  :CtrlP<cr>app/Processors/
nmap <Leader>lc  :CtrlP<cr>config/
nmap <Leader>ld  :CtrlP<cr>database/
nmap <Leader>lj  :CtrlP<cr>resources/assets/js/
nmap <Leader>ls  :CtrlP<cr>resources/assets/sass/
nmap <Leader>lv  :CtrlP<cr>resources/views/
nmap <Leader>lt  :CtrlP<cr>tests/
nmap <Leader>li  :e vendor/laravel/framework/src/Illuminate<cr>

"==> Quickly access Kirby files
nmap <Leader>kk :!kirby make:
nmap <Leader>kc  :e site/config/config.php<cr>
nmap <Leader>kr  :e site/config/routes.php<cr>
nmap <Leader>ksb :CtrlP<cr>site/blueprints/
nmap <Leader>ksc :CtrlP<cr>site/controllers/
nmap <Leader>ksm :CtrlP<cr>site/models/
nmap <Leader>ksp :CtrlP<cr>site/plugins/
nmap <Leader>kss :CtrlP<cr>site/snippets/
nmap <Leader>ksg :CtrlP<cr>site/tags/
nmap <Leader>kst :CtrlP<cr>site/templates/
nmap <Leader>ksu :CtrlP<cr>site/accounts/

"--- Macros
let @a="yiw/|^MO$this->^[pa = $^[pa;^[?construct^MOprotected $^[pa^M^[/construct^M/^R\"^M, "




"=== Plugins settings ===

"==> Ag (rking/ag.vim)
"-> map Leader search, to abstract the Ag away
nmap <Leader>s :Ag<space>


"==> Greplace (skqp/greplace.vim)
"-> map Leader capital search, to abstract Greplace away
nmap <Leader>S :Gsearch<space>
"-> Make greplace work with Ag, for search-and-replaces
set grepprg=ag
let g:grep_cmd_opts = '--line-numbers --noheading'


"==> Goyo (junegunn/goyo.vim)
nmap <Leader>vg :Goyo<cr>
"-> Don't do that margin stuff
let g:goyo_margin_top = 1
let g:goyo_margin_bottom = 1
"-> Hide stuff when entering Goyo mode
function! s:goyo_enter()
  silent !tmux set status off
  silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  set scrolloff=999
endfunction
function! s:goyo_leave()
  silent !tmux set status on
  silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  set scrolloff=1
endfunction
autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()


"==> PHP namespaces (arnaud-lb/vim-php-namespace)
"-> Import use/namespaces
function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a', 'n')
endfunction
"TODO Remap these to make sense
autocmd FileType php inoremap <Leader>n <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <Leader>n :call PhpInsertUse()<CR>
"-> Expand class to fully qualified classname
function! IPhpExpandClass()
    call PhpExpandClass()
    call feedkeys('a', 'n')
endfunction
autocmd FileType php inoremap <Leader>nf <Esc>:call IPhpExpandClass()<CR>
autocmd FileType php noremap <Leader>nf :call PhpExpandClass()<CR>



"==> Unsorted plugin config
"-- PHP CS fixer
let g:php_cs_fixer_level = 'PSR-2'
nnoremap <silent><leader>pf :call PhpCsFixerFixFile()<cr>

"-- PDV - docblocks voor PHP
let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates_snip"
nnoremap <Leader>d :call pdv#DocumentWithSnip()<cr>

"-- Ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"



"-> Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


"---- Auto Commands

"==> Source the .vimrc-file once when we save it
augroup autosourcing
    autocmd!
    autocmd BufWritePost .vimrc source %
augroup END

"==> Resize buffers when window is resized (by tmux)
autocmd VimResized * :wincmd =

"==> Exit help-files with just q
autocmd Filetype help nmap <buffer> q :q<cr>

"==> Merge your tab into the previous window as a split
function! MergeTabs()
  if tabpagenr() == 1
    return
  endif
  let bufferName = bufname("%")
  if tabpagenr("$") == tabpagenr()
    close!
  else
    close!
    tabprev
  endif
  split
  execute "buffer " . bufferName
endfunction

nmap <C-W>u :call MergeTabs()<CR>



" Notes and tips
"
" gg = bovenaan file
" G  = onderaan file
"
" zz = zet cursor in het midden
"
" v/d + i/a + ( = selecteer/delete alles tussen de haakjes
"
" Rebuild_index: `ctags -R`
"  `,f` / `:tag` om te zoeken
"  :tn = tag next
"  :tp = tag previous
"  :ts = lijst van alle tags
"  Ctrl+] = ga naar declaratie van functie
"  Ctrl+^ = ga terug naar laatste edit
"
" Zoeken:
" /iets<enter>
" daarna `n` voor de volgende plek
